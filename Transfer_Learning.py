# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1un9gAy7u_yJJVAjhhBEdBxq7JFPv8Ob_
"""

from keras.layers import Input, Dense, Flatten,Dropout,GlobalAveragePooling2D
from keras.models import Model
from keras.applications.vgg16 import VGG16
from keras.applications.vgg16 import preprocess_input
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
import numpy as np
from glob import glob
import matplotlib.pyplot as plt

!unzip dataset.zip

IMAGE_SIZE = [224, 224]

train_path = 'dataset/train'
valid_path = 'dataset/test'

vgg = VGG16(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)
mob = MobileNet(weights = 'imagenet', 
                 include_top = False, 
                 input_shape = IMAGE_SIZE + [3])




for layer in vgg.layers:
  layer.trainable = False

folders = glob('dataset/train/*')

folders

def create(bottom_model, num_classes):
    top_model = bottom_model.output
    top_model = GlobalAveragePooling2D()(top_model)
    top_model = Dense(1024,activation='relu')(top_model)
    top_model = Dense(1024,activation='relu')(top_model)
    top_model = Dense(512,activation='relu')(top_model)
    top_model = Dropout(0.2)(top_model)
    top_model = Dense(num_classes,activation='softmax')(top_model)
    return top_model

output=create(vgg,2)

model = Model(inputs=vgg.input, outputs=output)

model.summary()

model.compile(
  loss='categorical_crossentropy',
  optimizer='adam',
  metrics=['accuracy']
)

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('dataset/train',
                                                 target_size = (224, 224),
                                                 batch_size = 32,
                                                 class_mode = 'categorical')

test_set = test_datagen.flow_from_directory('dataset/test',
                                            target_size = (224, 224),
                                            batch_size = 32,
                                            class_mode = 'categorical')

model.fit_generator(
  training_set,
  validation_data=test_set,
  epochs=10,
  steps_per_epoch=len(training_set),
  validation_steps=len(test_set)
)

from keras.preprocessing import image
import numpy as np

file_path="dataset/test/bill_gates/14.jpg"
cimage = image.load_img(file_path, target_size=(224,224,3))

cimage = image.img_to_array(cimage)
cimage = np.expand_dims(cimage, axis=0)
result = model.predict(cimage)
if result.argmax()==0:
  pred="Bill Gates"
else:
  pred="Sundar Pichai"
import matplotlib.pyplot as plt
cimage = image.load_img(file_path, target_size=(224,224,3))
plt.imshow(cimage)
plt.show()
print("Predicted by model:",pred)

test_images("7.jpg")

